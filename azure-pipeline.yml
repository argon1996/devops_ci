trigger:
- main

pool:
  name: 'Default'

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'
  sonarQubeEndpoint: 'sonarqube'
  sonarQubeProjectKey: 'pruebaultima-key'
  sonarQubeProjectName: 'pruebaultima'

stages:
- stage: Checkout
  jobs:
  - job: Checkout
    steps:
    - checkout: self
      displayName: 'Clonar repositorio'

- stage: Install
  dependsOn: Checkout
  jobs:
  - job: Install
    steps:
    - task: UseNode@1
      inputs:
        versionSpec: '14.x'
        checkLatest: true

    - script: |
        npm install
      displayName: 'Instalar dependencias'

# - stage: LintCode
#   dependsOn: Install
#   jobs:
#   - job: LintCode
#     steps:
#     - task: Bash@3
#       inputs:
#         targetType: 'inline'
#         script: |
#           ./lint.sh
#       displayName: 'Ejecutar análisis de código estático con Bash'

- stage: SonarQubeAnalysis
  dependsOn: Install
  jobs:
  - job: SonarQubeAnalysis
    steps:
    - task: adopt-openjdk-installer@1
      inputs:
        majorVersion: '11'
        useLatestOption: 'latest'
        jdkArchitectureOption: 'x64'
        jvmOption: 'hotspot'
      displayName: 'Instalar AdoptOpenJDK 11'

    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(sonarQubeEndpoint)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarQubeProjectKey)'
        cliProjectName: '$(sonarQubeProjectName)'
        cliSources: '.'
      displayName: 'Preparar análisis de SonarQube'

    - task: SonarQubeAnalyze@5
      displayName: 'Ejecutar análisis de SonarQube'

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publicar resultados de SonarQube'

- stage: TestCode
  dependsOn: SonarQubeAnalysis
  jobs:
  - job: TestCode
    steps:
    - script: |
        npm test
      displayName: 'Ejecutar pruebas unitarias'

- stage: BuildDocker
  dependsOn: TestCode
  jobs:
  - job: BuildDocker
    steps:
    - script: |
        docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
        docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Construir imagen Docker'

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'dockerRegistryConnection'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Enviar imagen Docker al registro'

- stage: Deploy
  dependsOn: BuildDocker
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          kubectl apply -f deployment.yaml
      displayName: 'Desplegar en AKS'
