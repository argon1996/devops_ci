trigger:
- main

pool:
  name: 'Default'  # Nombre del pool donde está tu agente autoalojado

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'  # Nombre de tu conexión de servicio
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'
  sonarQubeEndpoint: 'https://sonarqube.example.com'  # URL de tu servidor SonarQube
  sonarQubeProjectKey: 'pruebaultima-key'  # Clave del proyecto en SonarQube
  sonarQubeProjectName: 'pruebaultima'  # Nombre del proyecto en SonarQube
  sonarQubeLogin: 'your-sonarqube-token'  # Token de autenticación de SonarQube

stages:
- stage: Checkout
  jobs:
  - job: Checkout
    steps:
    - checkout: self
      displayName: 'Clonar repositorio'

- stage: Install
  dependsOn: Checkout
  jobs:
  - job: Install
    steps:
    - task: UseNode@1
      inputs:
        versionSpec: '14.x'
        checkLatest: true

    - script: |
        npm install
      displayName: 'Instalar dependencias'

- stage: SonarQubeAnalysis
  dependsOn: Install
  jobs:
  - job: SonarQubeAnalysis
    steps:
    - powershell: |
        # Descarga e instala SonarScanner
        Invoke-WebRequest -Uri "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-windows.zip" -OutFile "sonar-scanner.zip"
        Expand-Archive -Path "sonar-scanner.zip" -DestinationPath "."
        $env:PATH += ";$(pwd)\sonar-scanner-4.6.2.2472-windows\bin"
        
        # Ejecuta el análisis de SonarQube
        sonar-scanner -Dsonar.projectKey=$(sonarQubeProjectKey) `
                      -Dsonar.projectName=$(sonarQubeProjectName) `
                      -Dsonar.host.url=$(sonarQubeEndpoint) `
                      -Dsonar.login=$(sonarQubeLogin) `
                      -Dsonar.sources=.
      displayName: 'Instalar y ejecutar análisis de SonarQube'

- stage: TestCode
  dependsOn: SonarQubeAnalysis
  jobs:
  - job: TestCode
    steps:
    - script: |
        npm test
      displayName: 'Ejecutar pruebas unitarias'

- stage: BuildDocker
  dependsOn: TestCode
  jobs:
  - job: BuildDocker
    steps:
    - script: |
        docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
        docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Construir imagen Docker'

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'dockerRegistryConnection'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Enviar imagen Docker al registro'

- stage: Deploy
  dependsOn: BuildDocker
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          kubectl apply -f deployment.yaml
      displayName: 'Desplegar en AKS'
