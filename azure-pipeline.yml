trigger:
- main

pool:
  name: 'Default'  # Nombre del pool donde está tu agente autoalojado

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'  # Nombre de tu conexión de servicio
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'
  sonarQubeEndpoint: 'sonarqube'  # Nombre de tu conexión de servicio a SonarQube
  sonarQubeProjectKey: 'pruebaultima-key'  # Clave del proyecto en SonarQube
  sonarQubeProjectName: 'pruebaultima'  # Nombre del proyecto en SonarQube
  sonarScannerVersion: '4.6.2.2472'  # Versión del SonarScanner compatible con Java 11

jobs:
- job: Checkout
  steps:
  - checkout: self
    displayName: 'Clonar repositorio'

- job: Install
  dependsOn: Checkout
  steps:
  - task: UseNode@1
    inputs:
      versionSpec: '14.x'
      checkLatest: true

  - script: |
      npm install
    displayName: 'Instalar dependencias'

- job: SonarQubeAnalysis
  dependsOn: Install
  steps:
  - powershell: |
      $url = "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$(sonarScannerVersion)-windows.zip"
      $output = "sonar-scanner.zip"
      Invoke-WebRequest -Uri $url -OutFile $output
      Expand-Archive -Path $output -DestinationPath . -Force
      $env:PATH = "$(Get-Location)\sonar-scanner-$(sonarScannerVersion)-windows\bin;$env:PATH"
      Write-Output "SonarScanner $(sonarScannerVersion) descargado e instalado."
    displayName: 'Instalar SonarScanner'

  - task: SonarQubePrepare@5
    inputs:
      SonarQube: '$(sonarQubeEndpoint)'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: '$(sonarQubeProjectKey)'
      cliProjectName: '$(sonarQubeProjectName)'
      cliSources: '.'
    displayName: 'Preparar análisis de SonarQube'

  - script: |
      sonar-scanner
    displayName: 'Ejecutar análisis de SonarQube'

  - task: SonarQubePublish@5
    inputs:
      pollingTimeoutSec: '300'
    displayName: 'Publicar resultados de SonarQube'

- job: TestCode
  dependsOn: SonarQubeAnalysis
  steps:
  - script: |
      npm test
    displayName: 'Ejecutar pruebas unitarias'

- job: BuildDocker
  dependsOn: TestCode
  steps:
  - script: |
      docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
      docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
    displayName: 'Construir imagen Docker'

  - task: Docker@2
    inputs:
      command: 'login'
      containerRegistry: 'dockerRegistryConnection'

  - script: |
      docker push $(containerRegistry)/$(imageRepository):$(tag)
    displayName: 'Enviar imagen Docker al registro'

- job: Deploy
  dependsOn: BuildDocker
  steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: '$(azureSubscription)'
      scriptType: 'ps'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
        kubectl apply -f deployment.yaml
    displayName: 'Desplegar en AKS'
