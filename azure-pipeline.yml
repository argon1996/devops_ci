trigger:
- main

pool:
  name: 'Default'  # Nombre del pool donde está tu agente autoalojado

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'  # Nombre de tu conexión de servicio
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'
  sonarQubeEndpoint: 'sonarqube'  # Nombre de tu conexión de servicio a SonarQube
  sonarQubeProjectKey: 'pruebaultima-key'  # Clave del proyecto en SonarQube
  sonarQubeProjectName: 'pruebaultima'  # Nombre del proyecto en SonarQube

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: UseNode@1
      inputs:
        versionSpec: '14.x'
        checkLatest: true

    - script: |
        npm install
      displayName: 'Instalar dependencias'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ./lint.sh
      displayName: 'Ejecutar análisis de código estático con Bash'

    # Tareas de SonarQube
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(sonarQubeEndpoint)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarQubeProjectKey)'
        cliProjectName: '$(sonarQubeProjectName)'
        cliSources: '.'

    - task: SonarQubeAnalyze@5

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

    # Comentado para evitar errores mientras no hay pruebas unitarias configuradas
    - script: |
        npm test
      displayName: 'Ejecutar pruebas unitarias'

    - script: |
        docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
        docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Construir imagen Docker'

    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'dockerRegistryConnection'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Enviar imagen Docker al registro'

- stage: Deploy
  jobs:
  - job: Deploy
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          kubectl apply -f deployment.yaml
      displayName: 'Desplegar en AKS'
