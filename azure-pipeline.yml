trigger:
- main

pool:
  name: 'Default'

variables:
  imageRepository: 'edwardpinzon651/hello-world'
  containerRegistry: 'miregistro1996.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'AzureServiceConnection'
  resourceGroup: 'miNuevoGrupoDeRecursos'
  aksCluster: 'miClusterAKS'
  sonarQubeEndpoint: 'sonarqube'
  sonarQubeProjectKey: 'pruebaultima-key'
  sonarQubeProjectName: 'pruebaultima'

stages:
- stage: InstallDependencies
  jobs:
  - job: InstallDependencies
    steps:
    - task: UseNode@1
      inputs:
        versionSpec: '14.x'
        checkLatest: true

    - script: |
        npm install
      displayName: 'Instalar dependencias'

- stage: SonarQubeAnalysis
  dependsOn: InstallDependencies
  jobs:
  - job: SonarQubeAnalysis
    steps:
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: '$(sonarQubeEndpoint)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarQubeProjectKey)'
        cliProjectName: '$(sonarQubeProjectName)'
        cliSources: '.'
      displayName: 'Preparar análisis de SonarQube'

    - task: SonarQubeAnalyze@5
      displayName: 'Ejecutar análisis de SonarQube'

    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'
      displayName: 'Publicar resultados de SonarQube'

- stage: LintCode
  dependsOn: SonarQubeAnalysis
  jobs:
  - job: LintCode
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ./lint.sh
      displayName: 'Ejecutar análisis de código estático con Bash'

- stage: UnitTests
  dependsOn: LintCode
  jobs:
  - job: UnitTests
    steps:
    - script: |
        npm test
      displayName: 'Ejecutar pruebas unitarias'

- stage: BuildDockerImage
  dependsOn: UnitTests
  jobs:
  - job: BuildDockerImage
    steps:
    - script: |
        docker build -t $(imageRepository):$(tag) -f $(dockerfilePath) .
        docker tag $(imageRepository):$(tag) $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Construir imagen Docker'

- stage: PushDockerImage
  dependsOn: BuildDockerImage
  jobs:
  - job: PushDockerImage
    steps:
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'dockerRegistryConnection'

    - script: |
        docker push $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Enviar imagen Docker al registro'

- stage: DeployToAKS
  dependsOn: PushDockerImage
  jobs:
  - job: DeployToAKS
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'ps'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroup) --name $(aksCluster)
          kubectl apply -f deployment.yaml
      displayName: 'Desplegar en AKS'
